;; Analyzed by ClojureScript 1.7.107
{:use-macros nil, :excludes #{}, :name ampere.handlers, :imports nil, :requires {ampere.db ampere.db, ampere.utils ampere.utils}, :uses {app-db ampere.db, warn ampere.utils, first-in-vector ampere.utils, error ampere.utils}, :defs {comp-middleware {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/handlers.cljs", :line 7, :column 7, :end-line 7, :end-column 22, :arglists (quote ([v])), :doc "Given a vector of middleware, filter out any nils, and use `comp` to compose the elements.\n  v can have nested vectors, and will be flattened before `comp` is applied.\n  For convienience, if v is a function (assumed to be middleware already), just return it.\n  Filtering out nils allows us to create Middleware conditionally like this:\n  `(comp-middleware [pure (when debug? debug)])  ;; that 'when' might leave a nil`\n  "}, :name ampere.handlers/comp-middleware, :variadic false, :file "target/client/ampere/handlers.cljs", :end-column 22, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Given a vector of middleware, filter out any nils, and use `comp` to compose the elements.\n  v can have nested vectors, and will be flattened before `comp` is applied.\n  For convienience, if v is a function (assumed to be middleware already), just return it.\n  Filtering out nils allows us to create Middleware conditionally like this:\n  `(comp-middleware [pure (when debug? debug)])  ;; that 'when' might leave a nil`\n  "}, id->fn {:name ampere.handlers/id->fn, :file "target/client/ampere/handlers.cljs", :line 27, :column 1, :end-line 27, :end-column 22, :private true, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/handlers.cljs", :line 27, :column 16, :end-line 27, :end-column 22, :private true}}, lookup-handler {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/handlers.cljs", :line 29, :column 7, :end-line 29, :end-column 21, :arglists (quote ([event-id]))}, :name ampere.handlers/lookup-handler, :variadic false, :file "target/client/ampere/handlers.cljs", :end-column 21, :method-params ([event-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-id]))}, clear-handlers! {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/handlers.cljs", :line 33, :column 7, :end-line 33, :end-column 22, :arglists (quote ([])), :doc "Unregister all event handlers"}, :name ampere.handlers/clear-handlers!, :variadic false, :file "target/client/ampere/handlers.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Unregister all event handlers"}, register-base {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/handlers.cljs", :line 38, :column 7, :end-line 38, :end-column 20, :arglists (quote ([event-id handler-fn] [event-id middleware handler-fn])), :doc "Register a handler for an event.\n  This is low level and it is expected that `ampere.core/register-handler` would\n  generally be used.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([event-id handler-fn] [event-id middleware handler-fn]), :arglists ([event-id handler-fn] [event-id middleware handler-fn]), :arglists-meta (nil nil)}}, :name ampere.handlers/register-base, :variadic false, :file "target/client/ampere/handlers.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([event-id handler-fn] [event-id middleware handler-fn]), :arglists ([event-id handler-fn] [event-id middleware handler-fn]), :arglists-meta (nil nil)}, :method-params ([event-id handler-fn] [event-id middleware handler-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists ([event-id handler-fn] [event-id middleware handler-fn]), :doc "Register a handler for an event.\n  This is low level and it is expected that `ampere.core/register-handler` would\n  generally be used."}, *handling* {:name ampere.handlers/*handling*, :file "target/client/ampere/handlers.cljs", :line 54, :column 1, :end-line 54, :end-column 26, :dynamic true, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/handlers.cljs", :line 54, :column 16, :end-line 54, :end-column 26, :dynamic true}}, handle {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/handlers.cljs", :line 56, :column 7, :end-line 56, :end-column 13, :arglists (quote ([event-v])), :doc "Given an event vector, look up the handler, then call it.\n  By default, handlers are not assumed to be pure. They are called with\n  two paramters:\n    - the `app-db` atom\n    - the event vector\n  The handler is assumed to side-effect on `app-db` - the return value is ignored.\n  To write a pure handler, use the `pure` middleware when registering the handler."}, :name ampere.handlers/handle, :variadic false, :file "target/client/ampere/handlers.cljs", :end-column 13, :method-params ([event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-v])), :doc "Given an event vector, look up the handler, then call it.\n  By default, handlers are not assumed to be pure. They are called with\n  two paramters:\n    - the `app-db` atom\n    - the event vector\n  The handler is assumed to side-effect on `app-db` - the return value is ignored.\n  To write a pure handler, use the `pure` middleware when registering the handler."}, setter {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/handlers.cljs", :line 76, :column 7, :end-line 76, :end-column 13, :arglists (quote ([db [_ & args]])), :doc "Simple handler to assoc-in value at specified path.\n  If path is empty, reset the whole state."}, :name ampere.handlers/setter, :variadic false, :file "target/client/ampere/handlers.cljs", :end-column 13, :method-params ([db p__15279]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db [_ & args]])), :doc "Simple handler to assoc-in value at specified path.\n  If path is empty, reset the whole state."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}