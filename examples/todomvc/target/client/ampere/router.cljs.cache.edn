;; Analyzed by ClojureScript 1.7.107
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name ampere.router, :imports nil, :requires {ampere.handlers ampere.handlers, ampere.utils ampere.utils, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, warn ampere.utils, handle ampere.handlers, put! cljs.core.async, error ampere.utils}, :defs {*flush-dom* {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/router.cljs", :line 7, :column 16, :end-line 7, :end-column 27, :dynamic true}, :name ampere.router/*flush-dom*, :variadic false, :file "target/client/ampere/router.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :dynamic true, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists nil, :doc "Renderer-specific function to flush DOM before CPU-intensive handler call.\n  Must be set on app init by adapter."}, event-chan {:name ampere.router/event-chan, :file "target/client/ampere/router.cljs", :line 16, :column 1, :end-line 16, :end-column 26, :private true, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/router.cljs", :line 16, :column 16, :end-line 16, :end-column 26, :private true}}, purge-chan {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/router.cljs", :line 18, :column 7, :end-line 18, :end-column 17, :arglists (quote ([])), :doc "Read all pending events from the channel and drop them on the floor."}, :name ampere.router/purge-chan, :variadic false, :file "target/client/ampere/router.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Read all pending events from the channel and drop them on the floor."}, router-loop {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/router.cljs", :line 27, :column 7, :end-line 27, :end-column 18, :arglists (quote ([])), :doc "In a perpetual loop, read events from `event-chan`, and call the right handler.\n\n   Because handlers occupy the CPU, before each event is handled, hand\n   back control to the browser, via a `(<! (timeout 0))` call.\n\n   In some cases, we need to pause for an entire animationFrame, to ensure that\n   the DOM is fully flushed, before then calling a handler known to hog the CPU\n   for an extended period.  In such a case, the event should be labeled with metadata.\n\n   Example usage (notice the `:flush-dom` metadata):\n\n       (dispatch ^:flush-dom  [:event-id other params])\n   "}, :name ampere.router/router-loop, :variadic false, :file "target/client/ampere/router.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "In a perpetual loop, read events from `event-chan`, and call the right handler.\n\n   Because handlers occupy the CPU, before each event is handled, hand\n   back control to the browser, via a `(<! (timeout 0))` call.\n\n   In some cases, we need to pause for an entire animationFrame, to ensure that\n   the DOM is fully flushed, before then calling a handler known to hog the CPU\n   for an extended period.  In such a case, the event should be labeled with metadata.\n\n   Example usage (notice the `:flush-dom` metadata):\n\n       (dispatch ^:flush-dom  [:event-id other params])\n   "}, dispatch {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/router.cljs", :line 72, :column 7, :end-line 72, :end-column 15, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler.\n  Usage example:\n  `(dispatch [:delete-item 42])`"}, :name ampere.router/dispatch, :variadic false, :file "target/client/ampere/router.cljs", :end-column 15, :method-params ([event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler.\n  Usage example:\n  `(dispatch [:delete-item 42])`"}, dispatch-sync {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/router.cljs", :line 83, :column 7, :end-line 83, :end-column 20, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler, but avoid the async-inducing\n  use of core.async/chan.\n  Usage example:\n  `(dispatch-sync [:delete-item 42])`"}, :name ampere.router/dispatch-sync, :variadic false, :file "target/client/ampere/router.cljs", :end-column 20, :method-params ([event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler, but avoid the async-inducing\n  use of core.async/chan.\n  Usage example:\n  `(dispatch-sync [:delete-item 42])`"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur :flush-dom}, :order [:recur :flush-dom :else]}, :doc nil}