;; Analyzed by ClojureScript 1.7.107
{:use-macros nil, :excludes #{}, :name ampere.core, :imports nil, :requires {subs ampere.subs, ampere.utils ampere.utils, ampere.handlers ampere.handlers, ampere.router ampere.router, router ampere.router, ampere.subs ampere.subs, handlers ampere.handlers, middleware ampere.middleware, ampere.middleware ampere.middleware, utils ampere.utils}, :uses nil, :defs {pure {:name ampere.core/pure, :file "target/client/ampere/core.cljs", :line 20, :column 1, :end-line 20, :end-column 10, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 20, :column 6, :end-line 20, :end-column 10}}, enrich {:name ampere.core/enrich, :file "target/client/ampere/core.cljs", :line 24, :column 1, :end-line 24, :end-column 12, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 24, :column 6, :end-line 24, :end-column 12}}, subscribe {:name ampere.core/subscribe, :file "target/client/ampere/core.cljs", :line 17, :column 1, :end-line 17, :end-column 15, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 17, :column 6, :end-line 17, :end-column 15}}, register-sub {:name ampere.core/register-sub, :file "target/client/ampere/core.cljs", :line 15, :column 1, :end-line 15, :end-column 18, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 15, :column 6, :end-line 15, :end-column 18}}, path {:name ampere.core/path, :file "target/client/ampere/core.cljs", :line 23, :column 1, :end-line 23, :end-column 10, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 23, :column 6, :end-line 23, :end-column 10}}, log-ex {:name ampere.core/log-ex, :file "target/client/ampere/core.cljs", :line 27, :column 1, :end-line 27, :end-column 12, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 27, :column 6, :end-line 27, :end-column 12}}, dispatch-sync {:name ampere.core/dispatch-sync, :file "target/client/ampere/core.cljs", :line 10, :column 1, :end-line 10, :end-column 19, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 10, :column 6, :end-line 10, :end-column 19}}, init! {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 47, :column 7, :end-line 47, :end-column 12, :arglists (quote ([{:keys [handlers subs], :as config}]))}, :name ampere.core/init!, :variadic false, :file "target/client/ampere/core.cljs", :end-column 12, :method-params ([p__17886]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [handlers subs], :as config}]))}, set-loggers! {:name ampere.core/set-loggers!, :file "target/client/ampere/core.cljs", :line 29, :column 1, :end-line 29, :end-column 18, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 29, :column 6, :end-line 29, :end-column 18}, :doc "Ampere uses the logging functions: warn, log, error, group and groupEnd\n   By default, these functions map directly to the js/console implementations\n   But you can override with your own (set or subset):\n       (set-loggers!  {:warn my-warn\n                       :log  my-looger ...})"}, undoable {:name ampere.core/undoable, :file "target/client/ampere/core.cljs", :line 22, :column 1, :end-line 22, :end-column 14, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 22, :column 6, :end-line 22, :end-column 14}}, debug {:name ampere.core/debug, :file "target/client/ampere/core.cljs", :line 21, :column 1, :end-line 21, :end-column 11, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 21, :column 6, :end-line 21, :end-column 11}}, setter {:name ampere.core/setter, :file "target/client/ampere/core.cljs", :line 13, :column 1, :end-line 13, :end-column 12, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 13, :column 6, :end-line 13, :end-column 12}}, clear-sub-handlers! {:name ampere.core/clear-sub-handlers!, :file "target/client/ampere/core.cljs", :line 16, :column 1, :end-line 16, :end-column 25, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 16, :column 6, :end-line 16, :end-column 25}}, trim-v {:name ampere.core/trim-v, :file "target/client/ampere/core.cljs", :line 25, :column 1, :end-line 25, :end-column 12, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 25, :column 6, :end-line 25, :end-column 12}}, sample {:name ampere.core/sample, :file "target/client/ampere/core.cljs", :line 18, :column 1, :end-line 18, :end-column 12, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 18, :column 6, :end-line 18, :end-column 12}}, dispatch {:name ampere.core/dispatch, :file "target/client/ampere/core.cljs", :line 9, :column 1, :end-line 9, :end-column 14, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 9, :column 6, :end-line 9, :end-column 14}}, after {:name ampere.core/after, :file "target/client/ampere/core.cljs", :line 26, :column 1, :end-line 26, :end-column 11, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 26, :column 6, :end-line 26, :end-column 11}}, clear-event-handlers! {:name ampere.core/clear-event-handlers!, :file "target/client/ampere/core.cljs", :line 12, :column 1, :end-line 12, :end-column 27, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 12, :column 6, :end-line 12, :end-column 27}}, register-handler {:protocol-inline nil, :meta {:file "/Users/kyusa/GitHub/ampere/examples/todomvc/target/client/ampere/core.cljs", :line 39, :column 7, :end-line 39, :end-column 23, :arglists (quote ([id handler] [id middleware handler])), :doc "Almost 100% of handlers will be pure, so make it easy to\n   register with `pure` middleware in the correct (left-hand-side) position.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([id handler] [id middleware handler]), :arglists ([id handler] [id middleware handler]), :arglists-meta (nil nil)}}, :name ampere.core/register-handler, :variadic false, :file "target/client/ampere/core.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([id handler] [id middleware handler]), :arglists ([id handler] [id middleware handler]), :arglists-meta (nil nil)}, :method-params ([id handler] [id middleware handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 3, :fn-var true, :arglists ([id handler] [id middleware handler]), :doc "Almost 100% of handlers will be pure, so make it easy to\n   register with `pure` middleware in the correct (left-hand-side) position."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:handlers :subs}, :order [:handlers :subs]}, :doc "Ampere API entry point. Re-export frequently used functions"}